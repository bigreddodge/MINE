
//        unsigned long getHeaderSize();
//        void setFileSize(unsigned long fileSize);
//        void setStartOfBitmap(unsigned long startOfBitmap);
//        void setHeaderSize( unsigned long headerSize);
//        void setWidth(unsigned long width);
//        void setHeight(unsigned long height);
//        unsigned short getBM();
//        unsigned short getPlanes();
//        void setPlanes(unsigned short planes);
//        unsigned long getCompression();
//        void setCompression(unsigned long compression);
//        unsigned long getCompressionSize();
//        void setCompressionSize(unsigned long compressionSize);
//        unsigned long getHorizontalResolution();
//        void setHorizontalResolution(unsigned long horizontalResolution);
//        unsigned long getVerticalResolution();
//        void setVerticalResolution(unsigned long verticalResolution);
//        void setNumberOfColorsInPalette(unsigned long numberOfColorsInPalette);
//        unsigned long getImportantColors();
//        void setImportantColors(unsigned long importantColors);

//    ///Pixel test:
//    int px = getStartOfBitmap();
//    std::cout << "\n\n";
//    for (int c = 0; c < 3; ++c){
//        for (int i = 0; i < 8; ++i){
//            std::cout << ((fileData[px+c] >> i) & 0x01);
//        }
//        std::cout << "\n";
//    }


//Removed this function because it's long and confusing (and probably takes more clock cycles) Replaced it with a loop. Verified identical function with IDEOne.
//unsigned long bmp_file::get32(int LSBindex){
//    return (unsigned long) (((unsigned long)fileData[LSBindex + 3]) << 24) | (((unsigned long)fileData[LSBindex + 2]) << 16) | (((unsigned long)fileData[LSBindex + 1]) << 8) | ((unsigned long)fileData[LSBindex]);
//}

//unsigned long bmp_file::getHeaderSize(){}
//
//unsigned short bmp_file::getPlanes(){}
//void bmp_file::setPlanes(unsigned short planes){}
//
//unsigned long bmp_file::getCompression(){}
//void bmp_file::setCompression(unsigned long compression){}
//
//unsigned long bmp_file::getCompressionSize(){}
//void bmp_file::setCompressionSize(unsigned long compressionSize){}
//
//unsigned long bmp_file::getHorizontalResolution(){}
//void bmp_file::setHorizontalResolution(unsigned long horizontalResolution){}
//
//unsigned long bmp_file::getVerticalResolution(){}
//void bmp_file::setVerticalResolution(unsigned long verticalResolution){}
//
//void bmp_file::setNumberOfColorsInPalette(unsigned long numberOfColorsInPalette){}
//
//unsigned long bmp_file::getImportantColors(){}
//void bmp_file::setImportantColors(unsigned long importantColors){}


//std::cout << "\n  " << argv[0] << "inputfile.bmp outputfile.bmp";
//std::cout << "\n    Displays information about inputfile.bmp and rewrites it to outputfile.bmp.";
//    else if (argc == 4) {                               /**< Histogram syntax: milestone1 input.bmp output.bmp -h */
////        if (argv[3] == "-h\0") {
//            histogramEqualization(argv[1], argv[2]); }
////        else {
////            showSyntaxMessage(argv[0]); }
//}










/**< Graveyard */
/**< Test function to write A-Z to testfile.bbb */
/**<
void writeTest();
void writeTest(){
    std::ofstream outFile;
    outFile.open("testfile.bbb", std::ofstream::out | std::ofstream::binary);
    vector<unsigned char> test;
    for (int i = 65; i < (65+26); ++i)
        test.push_back((char)i);
    char * buffer = new char [1];
    for (unsigned int i = 0; i < test.size(); i++){
        *buffer = test[i];
        outFile.write(buffer,1);
    }
}
 */



 /**< Displays the bits in a specified byte */
 /**<
void printBits(unsigned char byte);
void printBits(unsigned char byte){
    for (int i = 7; i >= 0; i--)
        std::cout << ((byte >> i) & 0x1);
    std::cout << ' ';
}
*/

 /**< from ShowHeaderData

        int a = myFile.getStartOfBitmap();
        std::cout << "\n";
        for (int i = a; i < (a + 16); ++i)
            printBits(myFile.getPixel(i));
 */




    /// Write to data files
    /**
    for(unsigned int i = 0; i< histogram.size(); i++)
    {
        beforeFile << (unsigned int)histogram[i].color << ","
                << histogram[i].counter << std::endl;
        afterFile << (unsigned int)histogram[i].newColor << ","
                << histogram[i].counter << std::endl;
    }

    beforeFile.close();
    afterFile.close(); */





    /// Preping files for csv output of data before and after algorithim runs
    /**
    std::ofstream beforeFile;
    beforeFile.open("before.csv");
    std::ofstream afterFile;
    afterFile.open("after.csv");
    */


//    else if (argc == 5) {                               /**< Overlay syntax: milestone1 input.bmp output.bmp -o overlay.bmp */
////        if (argv[3] == "-o") {
//            imageOverlay(argv[1], argv[2], argv[4]);}
////        else {
////            showSyntaxMessage(argv[0]); }
//}
//    else {                                              /**< Default */
//        showSyntaxMessage(argv[0]); }
//        std::cout << "\nOperation complete.";
